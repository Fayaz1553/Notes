###Docker is an open source containerization platform for building, deploying, and managing containerized applications.

What exactly is a Docker image?
A Docker image is a read-only template that contains a set of instructions for creating a container that can run on the Docker platform. 
	Docker uses container on the host's operating system to run applications. It allows applications to use the same Linux kernel as a system on the host computer, rather than creating a whole virtual operating system
	It provides a convenient way to package up applications and preconfigured server environments, which you can use for your own private use or share publicly with other Docker users.

Container----> A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably anywhere.
			The advantage of using a docker container is that you don't need to allocate any RAM and disk space for the applications. It automatically generates storage and space according to the application requirement.


Docker daemon runs on the host operating system. It is responsible for running containers to manage docker services. Docker daemon communicates with other daemons. It offers various Docker objects such as images, containers, networking, and storage


CMD commands
-------------
echo <it just prints the matter given here>
echo > <filename>  //to create a file > means create a file with the name given next to it
dir  //lists the folders in it. same as ls
type <file name>  //shows the content inside of file like cat command in bash
---------------

docker images
docker --help
docker search <img name>	//to search images in registery

docker ps -a //to see all containers
docker ps  // to see only the running containers
docker ps -l  //to see last exited container

docker kill <container id>	//to stop container

docker rm <container id> //to remove/delete a container 
docker rmi <image id> //to remove an image

docker pull <image name> //to only pull the image to ur local repo
docker run <image name or id> //it pull img from dockerhub if it's not exist in local repo & runs automatically 

docker run --rm -it <img name>	//it starts the container and deletes it when the process got completed.

docker exec -it --name <container name> <image name/container id> bash  //or use run instead of exec, to enter into image or creating the container from root ( /bin/sh means in shell mode & -it means interactive terminal)
docker run -d -p <ports> <our img name> //to run our custom img on our ports( -d : It is used to create a daemon process or -d means detached mode i.e, it runs in the background of terminal so, we can do another work.)
docker run -it --v <location> --name <container name> <image name>

docker attach <container name/Id>	//to jump back into running container i.e running in detached mode

docker commit <container Id>	//to convert containers to images(after commit, it contains all the modified files)

docker start <container id>
docker stop <container id>
docker restart <container id>

docker build -t <img name> .  //-t means tag i.e tag the given image name to this img & . means the docker file is in current path only, otherwise add path

docker network create <network name>
docker network ls
docker run -it --net <network name> --name <container name> <image name>	//to start in particular network

docker system prune //deletes all stopped containers, dangling imgs, not used networks

persistent volumes---permannent
ephemeral volumes---temporary

docker volume create <vol name>
docker volume rm <vol name>	//to remove vols
docker volume ls	//to list them


--> Docker Compose is designed to run multiple containers on a single host system. it uses yaml to manage diff containers as a single service.
docker-compose up -d //to execute compose.yml file
docker-compose down  //to stop it


Dockerfile (no extension)// A text file with instructions to build image. Automation of Docker Image Creation
------------------------------
FROM <image name : version>
MAINTAINER <name> <email>
RUN apt-get update && \			// here, \ means there is another line below which belongs to this command 
    apt-get install -y <any libs>
WORKDIR
ADD or COPY
EXPOSE <port no>
CMD [ <commands> ]
ENTRYPOINT <commands>
VOLUME <path>


Docker-compose.yml
-------------------
version: '3'
services:
web: //any name
	image:
	build: <directory to build img>//if we didnt want to use dockerhub img
	ports:
	   - <ports>
	environment:
	   - <bla bla ...>
	   - <bla bla ...>
	volumes:
	   - <path>
database:
	image:
	ports:
	   - 8080:80
	depends_on:
	   - web //any name that presents there above



examples:
----------
From ubuntu
MAINTAINER fayaz
RUN apt-get update 
CMD ["echo","hello dockers"]


FROM openjdk
MAINTAINER fayaz
WORKDIR /code
ADD Demo.java /code
//we should write environment variables here if we dont have them in our system
RUN javac Demo.java
CMD ["java","Demo"]


FROM platform/images/alpine-extended:1.0.0
ENV \
    CUST_PATH=./customization \
    HOME=.

USER root
COPY run.sh $HOME
COPY dop-tasks-list.json $CUST_PATH/
COPY dop-projects-list.json $CUST_PATH/
RUN chmod 755 $HOME/run.sh
WORKDIR $HOME
ENTRYPOINT ["./run.sh"]


Docker												Kubernetes
------												------------
Docker is developed by Docker Inc.								Kubernetes is developed by Google.
It was first released in 2013.									It was first released in 2014.
It is a container based technology used to create isolated environment for applications.	It is an infrastructure for managing multiple containers.
It allows us to use third-party tools like ELK for logging and monitoring.			It allows us to use in-built tools for logging and monitoring.
Its public cloud service provider is only Azure.						Its public cloud service providers are Google, Azure, and AWS.
It is less customizable.									It is highly customizable.
Its container limit is 95000.									Its container limit is 300000.
It is easy to install.										It is complex to install.
It cannot do auto-scaling.									It can do auto-scaling.
It does not provide any dashboard.								It provides a Web UI dashboard.

