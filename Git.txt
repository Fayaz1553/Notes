=========GIT==========
Git is a free and open source distributed version control system.
It is developed to manage projects with high speed and efficiency. The version control system allows us to monitor and work together with our team members at the same workspace.

A version control application allows us to keep track of all the changes that we make in the files of our project
in GIT, The HEAD points out the last commit in the current checkout branch. It is like a pointer to any reference. The HEAD can be understood as the "current branch".

git --version
clear

git config --list	//shows all details of user
git config --global
git config --global -e  //to edit

git config --global user.name “fayaz.shaik”
git config --global user.email fayaz.shaik@google.com
git config --global https.proxy 192.168.111.52:8050
git config --global http.proxy 192.168.111.52:8050
git config --global --unset https.proxy
git config --global --unset http.proxy

git config --global alias.<alias name> "command name to be aliased"  //aliasing any command temporary
---> Ex: git config --global alias.allcommits "log --oneline --graph --all"

alias np=notepad //aliasing editor temporary aliasses

git config --global core.editor "location url of notepad++ in C"  //to set thirdparty app as default editor
git config core.editor  //to see which editor is there by default

git help <keyword  (or)  git <keyword> --help

<name of that app>	// to use any third party app, if not configured add path in system variables

git remote //to know the name of remote repo
git remote add origin <destination git url> //to link to remote server ie, github
git remote set-url origin <destination git url> //if already added then use set-url to add new git URL

git workflow
-------------
working directory --add--> staging area ---commit--> local rep(.git) --push--> remote repo(git hub, bitbucket etc)

cmd:
----
git clone <repo-url> <preferred name if u want> //to copy original project from github
git clone -b <branch name> <branch url>	//it clones specific branch in given branch

git fetch origin  //to fetches the changes in remote to local origin/master then we merge it with master branch to see new files added in remote repo
git pull origin master  // it fetches and merges in master branch automatically

git init  //initialize the git folder(.git is ceated)
git status //to view all the files(changes) which are not staged.
git add <updated file name>  //to stage the changes, if u want all files then add .(period) after the add
git commit -m "message to commit"  //to save in local repo
git push -u origin <branch name>  //to push into remote repo or git Hub

---> create .gitignore file and mention the file names or patters(ex: *.txt) in it those u dont want to push into repo

git diff  //same as status but shows actual difference in content ,it has to be in stagged stage

git log  // gives history of commits in project
git log --pretty=oneline or full or fuller  //based on our req
git log --oneline --graph --all  // graph used to show branches as tree  &all is used to see logs of all branches

git branch < new branch name>   //creating a branch
git branch -a //to see all branches
git checkout <branch name>  //to shift to mentioned branch
git checkout -b <new branch name>  //creates a new branch and automatically switches to that branch
git branch -m <old name> <new name>	//to rename old branch with new name
git branch -d <branch name> //to delete a branch

git merge <banch name>  //merges given branch name with present branch(the branch we present), gives graphical view in log
git rebase <branch name>  //merges but didnt give graphical view in log

########### p4merge tool is used to see diff and merge procees in easy & simple way ###################

git stash //deletes content  that's in staged stage & sent to dustbin(backup).we can take it back if we needed.
git stash list //to see stashed list
git stash apply //it takes back the latest stash in the stack flow
git stash apply stash@{id of stash}  //to get a particular stash ex.stash@{2}
git stash pop //takes back latest stash from stack & drops that from stack automatically
git stash drop // deletes latest stash in stack 

git cherry-pick <commit-id of another branch>  // for applying same commit from one branch into another branch(give another branch commit ID in required branch)

git clean -f -d -x //permanently deletes untracked files only( -f means forcely, -d means directory, -x means .gitignore)

git tag <tag name>  //to mark or tag a commit
git tag -a <tag name>  //-a for animated tag
git tag  //lists all tags
git tag -d <tagname> // to delete a tag

git restore <filename>  //to undo changes made in working directory stage (Before add)
----or----
git checkout -- <filename> // same as restore, but for undoing multiple file use dot(. // space should be there btw -- and filename

git reset <file name>  //to undo after add
git reset <commit id> //undos commit (use commit id that u want to go back to)


Generating a new SSH key
-------------------------
ls -al ~/.ssh	//to see all the avialable shh keys in our PC

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"	//to generate ssh keys

eval "$(ssh-agent -s)"	//to runssh-agent

ssh-add -K ~/.ssh/id_rsa	//to add ur private key to ssh-agent

clip < ~/.ssh/id_rsa.pub	//or add shh public key in guthub>settings>ssh & gpg keys>save by copying from .ssh folder






============UNIX/LINUX=============
touch,find,ping,curl -0,ssh, ps ax, top,kil <pid>, |(append or pipe)

man <command> ---> gives manual page... information about commads
info <command> ---> gives detailed info abt a command
whatis <command> --->gives purpose of cmd
who ---> lists the name of all users curently logged in.
who am i --->displays user name
hostname --->displays host name(hostname -i --->displays ip address of hostname)
pwd ---> shows present working directory
date ---> current date
cal ---> print current month cal (cal <year> - give full year calender)
clear ----> clears sceen

mkdir [dirName]----> Ceate a new directory
mkdir -p welcome/new/images ----> creates intermediate directories i.e; directories within dir's
mkdir 'my computer' ---> to create a dir that contains ---spaces---.
rmdir [dirName]---> to remove empty dir

cd [dir name] ---> to move inside that directory
cd .. ---> to go back to previous directory(parent dir)
cd ../../.. ---->to tell how many times to go back(Here; 3 times)
cd ---> go's to home directory($)

echo <just prints the matter given here>
echo > <filename>  //to create a file > means create a file with the name given next to it
dir  //lists the folders in it. same as ls (for windows)
type <file name>  //shows the content inside of file like cat command in bash

cat filename.txt  -----> to see data inside file
cat > filename.txt ----> to create file and can directly enter data in a file(to exit press---> CRTL+C)
touch <filename> ---> to create a file (with this we can create empty files & hidden files only)	//touch ex.txt & touch .dir1
less filename.txt ----> to see data in file only(to quit press--> q)
vi filename.txt ----> to see and modify data in it(to modify data press INSERT...to quit press Esc-->type :wq! to save)
head <filename>---> optputs the first 10 line of a file

rm [filename]---> to remove/del a file
rm -rf <folder to delete>
rm -r [dir name]---> danger cmd i.e; it deletes all files & subDir within a dir and dir itself.

cp [soucefile] [newfile/dir] ---> copies data from source to newfile/ dir
mv [old file] [new file/directory]---> to rename files /move files to another file or directory

grep ----> to search for patterns in a existing file(Global search Regular Expression and Printed)
grep 'fayaz' filename ---> search fayaz keyword in given file name
grep -c ---> counts the matched keyword in file
grep -i ---> ignores caseSensitive of upper & lower cases while searching.
grep -v ----> to print lines that do not contain or match the expression.(ignores given pattern)

history -c  ---> to clear entire history

chmod---> to change access/permissions of one or more files(only super user should change)
chmod <permissions> filename	//chmod 641 home

logout or exit ---> to quit from unix

df ---> tells how much disk is used and how much is free
ulimit 10000---> tells that the max file size(10000 bytes) that a user can create.

bc ---> u are in calculator mode(to exit type --> quit)
factor ---> u r in prime factor mode.. It displays prime factors of a num(to quit press---> CTRL+C)


nslookup oss-ext1-solstice.vfde.corp.amdocs.aws  //for ip of dns

scp <file/folder name> root@<master-IP of target env>:<location in target env>	// to copy files/certs from one machine to another
Ex: scp VFGS-ASOM.cer root@10.246.34.12:root/keys/kubernetes

curl
----
curl --location 'https://{{host}}/dop/security/rest/loginservice/login'
--header 'Content-Type: application/json'
--data '{
"userID": "OHProxyUser",
"password": "OHProxyUser123"}'

curl -X POST 'https://api-xtest-1.x-test03.aws.solstice.vodafone.com/accountManagement/v1/billingAccount' 
-H 'Authorization:Bearer xxx' 
-H 'Accept:application/json' 
-H 'Content-Type:application/json' 
-d '{
	"extensions": {
		"migrationInformation":
		{
			"migrationProcess": "MoD"
		}
}}'

FILE SYSTEMS
------------
ROOT--->file systm is organisedd as a tree with single root node ROOT(.root dir is denoted as /)
DEV --->contains files that control various ip/out devices like terminals, printers,disks etc
BIN --->it contains executable files for most of the unix commands
TEM --->contains temporary files created by unix or user
USR --->contains several dir's each associated with particular user(there is anothe BIN in USR that contains additional cmds)
ETC --->contains binary executable files req for system administration
LIB --->it contains all the library functions provided by unix users
UNIX--->has some predefined directories

