============Hibernate============
Hibernate is a Java framework used to map Java objects to database tables for simplifying database operations. 
It is an open-source, non-invasive, lightweight java ORM(Object-relational mapping) framework that is used to develop persistence logic that is independent of Database software. With features like automatic transaction management and caching, Hibernate simplifies and optimizes database interactions, making it an indispensable framework for efficient data management in Java applications. Hibernate supports almost all the major RDBMS.

HIBERNATE vs JDBC
------------------
1) A)Hibernate is database independent and same code can work for many databases with minor changes.
   B)JDBC is database dependent i.e. one needs to write different codes for different database.
2) A)For Hibenate no need to have SQL knowledge
   B)For JDBC we need to have SQL knowledge
3) A)Hibernate is a higher-level ORM framework that automates these tasks, allowing developers to work with Java objects and abstracting away the low-level database operations.
   B)JDBC is a low-level API that requires manual handling of database connections, writing SQL queries, and managing result sets


SQL Dialect --> converts HQL queries to specific DB queries
# HQL is an object-oriented query language, similar to SQL, but instead of operating on tables and columns, HQL works with persistent objects and their properties.
HQL is database-independent
EX: String hib = "FROM Student"; / String hib = "FROM Student S WHERE S.id = 5";
    Query query = session.createQuery(hib);
    List results = query.list();

Dialect is a class that acts as a bridge between Java JDBC types and SQL types. The SQL dialect converts the HQL(Hibernate Query Language) query which we write in java or any other object-oriented program to the specific database SQL query. 
	- hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect  //DB specific dielect we need to use


Native SQL queries are useful when you need to perform complex queries that cannot be expressed using Hibernate’s Query Language (HQL).
In Hibernate, you can execute native SQL queries using the createNativeQuery() method provided by the Session interface or EntityManager interface (if you're using JPA with Hibernate as the persistence provider). 
Here's how you can execute native SQL queries in Hibernate:
1) Using Session (Hibernate-specific):
	Session session = sessionFactory.openSession();
	List<Object[]> results = session.createNativeQuery("SELECT * FROM my_table").list();
	session.close();
2) Parameterized Queries:
	Query query = session.createNativeQuery("SELECT * FROM my_table WHERE column = :value");
	query.setParameter("value", value);
	List<Object[]> results = query.list();

Hibernate Anotations (hibernate.cfg.xml /hibernate.properties ----> config file)
--------------------
@Entity
@Table(name="name of table in DB ") //its not needed if we want table name same as class name
@Id //primary key
@GeneratedValue(strategy = GenerationType.IDENTITY)  //to autoIncrement
@Column(name="name of column in DB") //if name is not specified, it will take variable name
@Inheritance -> This annotation defines the inheritance strategy to be used for an entity class hierarchy. It is specified on the entity class that is the root of the entity class hierarchy(that means; remaining enitity classes will get the fields of first entity class for which @Inheritance is used).
If this annotation is not specified or if no inheritance is specified for an entity class hierarchy, the SINGLE_TABLE mapping strategy is used.
@Transient -> Tells the hibernate, not to add this particular column
@Transactional //instead of beginTransaction(); getTransaction().commit();
	       //use it in servive lyr, if theres no service lyr, impl it in dao lyr
The @Transactional annotation in Spring is used to specify that a method or a class method should be executed within a transactional context. This means that if the method executes successfully, any changes made to the database within that method will be committed, and if an exception occurs, the changes will be rolled back.


DAO----> Session Factory---->Data souce---->DB	(Normally we have to do all these config's but SpringBoot automatically do's that for us, based on added dependencies & conditions in application.properties)

SessionFactory ---> reads hibernate config file, creates session objects, creates only once in the app.
	The SessionFactory is a thread safe object and used by all the threads of an application. It is a heavyweight object; it is usually created during application start 	up and kept for later use. You would need one SessionFactory object per database using a separate configuration file. So, if you are using multiple databases, then 	you would have to create multiple SessionFactory objects.
Session ---> wraps a jdbc connection, used to save/retrive objects.
	A Session is used to get a physical connection with a database. The Session object is lightweight and designed to be instantiated each time an interaction is needed 	with the database. Persistent objects are saved and retrieved through a Session object. The session objects should not be kept open for a long time because they are 	not usually thread safe and they should be created and destroyed them as needed.

IMPL
----
SessionFactory factory= new Configuation().configure("hibernate config file name i.e; hibernate.cfg.xml").addAnnotatedClass(give entity class name).buildSessionFactory();
Session session = factory.getCurrentSession();
//.....obj, DB data
session.beginTransaction();
//.....code....
session.getTransaction().commit();


Hibernate Lifecycle
-------------------
1)Transient State -> The transient state is the first state of an entity object. When we instantiate an object of a POJO class using the new operator then the object is in the transient state. This object is not connected with any hibernate session. 
2)Persistent State -> Once the object is connected with the Hibernate Session then the object moves into the Persistent State.
3)Detached State -> To move from Persistent State to Detached State, we either have to close the session or we have to clear its cache. As the session is closed or cache is cleared, then any changes made to the data will not affect the database table. 
4)Removed State -> when the entity object is deleted from the database then the entity object is known to be in the removed state. It is done by calling delete() operation.


JPA:
----
JPA stands for Java Persistence API (Application Programming Interface). It is a Java specification that gives some functionality and standard to ORM tools. It is used to examine, control, and persist data between Java objects and relational databases. It is observed as a standard technique for Object Relational Mapping. 
As it is a specification of Java, JPA does not conduct any functioning by itself so, it needs implementation. Hence, for data persistence ORM tools like Hibernate, implements JPA specifications. javax.persistence package contains the JPA classes and interfaces. 
In very simple terms we can say JPA (Java persistence api) is like an interface and the hibernate is the implementation of the methods of the interface
 - Hibernate is an implementation of JPA guidelines.
 - It helps in mapping Java data types to SQL data types.
 - It is the contributor of JPA.


get() vs load()
---------------
1) A)get() returns null if the object doesn’t exist in the database or session cache.  //session.get(Student.class, 102); 
   B)load() throws ObjectNotFoundException if the object doesn’t exist in the database or session cache. //session.load(Student.class,102);
2) A)get() is used to fetch an object when it is not sure whether the object exists or not.
   B)load() is used to fetch an object if it is sure that object exists.
3) A)get() returns fully initialized object, so this method EAGER load the object  
   B)load() always returns proxy object, so this method is LAZY load the object.


Association Mappings
--------------------
1) @OneToOne - eager
It represents that a single entity is associated with a single instance of the other entity. ie; A person has only one passport
Ex: @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "student_details") //Foreign key column name in primary table. if not given obj name will be taken as column name
    private Passport passport;

2) @OneToMany - lazy
One Library have many books
Ex: @OneToMany(cascade = CascadeType.ALL) //cascade should be mentioned in primary table
    @JoinTable(name = "lib_book_table") //Relation table name
    private List<Book> books;

3) @ManyToOne - eager
Many Employees are present in One Department
Ex: @ManyToOne(cascade = CascadeType.ALL) //cascade should be mentioned in primary table
    @JoinTable(name = "lib_book_table", JoinColumns = @JoinColumn(name=""emp_id), inverseJoinColumn = @JoinColumn(name="dep_id")) 
    private Department department;	//@JoinTable - Relation table name, @JoinColumn - relation table column names

4)@ManyToMany - lazy
Many Libraries have many books
Ex: @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(name = "prod_user_id")  //to specify name of relationship table, otherwise default nmae is populated by hibernate
    private List<Product> products;
	----- bi directional-----
	@ManyToMany(mappedBy = "products") //use above obj name for this (it avoids creating another relationship table by secondary table)
	private List<User> users;


//use cascading in primary table/class, so child will get those props automatically.
CascadeType.ALL – Propagates all operations(create, update, read, delete) from parent to target entity.
CascadeType.PERSIST – Propagates persist from parent to target entity.
CascadeType.MERGE – Propagates merge from parent to target entity.
CascadeType.REMOVE – Propagates remove from parent to target entity.
CascadeType.REFRESH – Propagates refresh from parent to target entity.
CascadeType.DETACH – Propagates detach from parent to target entity.


Eager vs Lazy loadings
----------------------
FetchType is an enumerated type in the Java Persistence API (JPA) that specifies whether the field or property should be lazily loaded or eagerly loaded. It is used in the javax.persistence.FetchType enum

Eager -> retrieve everything
This FetchType means that the associated entity will be fetched together with the main entity when the main entity is fetched from the database. This can look very efficient because it fetches all entities with only one query. But in most cases, it creates a huge overhead(more expense) because Hibernate fetches these entities even if your business code doesn’t use them. You can prevent this with FetchType.LAZY
	ex: @OneToOne(fetch = FetchType.EAGER)
Lazy(preffered) -> retrieves on request/demand basis
This is the default FetchType in Hibernate. It means that the associated entity will be fetched only when it is accessed for the first time. It tells Hibernate to delay the initialization of the association until you access it in your business code. The drawback of this approach is that Hibernate needs to execute an additional query to initialize each association. This causes n+1 select issue and is one of the most common reasons for performance issues. You can avoid it by using query-specific fetching.
	ex: @OneToOne(fetch = FetchType.LAZY)


N+1 problem:
------------ 
The N+1 problem is a performance issue that often occurs in database queries, particularly in the context of object-relational mapping (ORM) systems. The problem arises when you retrieve a collection of entities along with their related entities in a one-to-many or many-to-many relationship (when you use `FetchType. LAZY` for your entity associations). The "N+1" in the term refers to the number of queries executed: one initial query to retrieve the main entities and an additional query for each related entity, resulting in N+1 queries.

simple example to illustrate the N+1 problem:
Let's say you have a database model with two entities: Author and Book, where each author can have multiple books. If you retrieve a list of authors and then iterate through each author to access their books, you may end up executing one query to retrieve the authors and N additional queries to fetch the books for each author.

To avoid the N+1 problem, you can use the following techniques:
------------------------
1) By using JOIN FETCH -> select a from Author a left join fetch a.books
2) Eager Loading: Eager loading involves fetching the related entities along with the main entities in a single query, reducing the need for additional queries. @ManyToOne(fetch = FetchType. EAGER)


Caching:
---------
Caching is a mechanism to enhance the performance of a system. It is a buffer memory that lies between the application and the database. Cache memory stores recently used data items in order to reduce the number of database hits as much as possible.
There are two kinds of caching: 
 -> First-level Cache (Session-level) - MANDATORY cache
 -> Second-level Cache (SessionFactory-level) - OPTIONAL cache
Level 1 cache is a cache that stores objects that have been queried and persist to the current session. This cache helps to reduce the number of database round trips by storing objects that are frequently accessed in the session. Level 1 cache is the default cache in hibernate. It is related to the hibernate session object. In addition, since the first-level cache is associated with a single session, it ensures that changes made to entities within one session are not visible to other sessions until they are committed to the database.
In the Hibernate configuration file (hibernate.cfg.xml) add the following property:
	<property name="hibernate.cache.use_query_cache">true</property>
@Cacheable - used to configure the first-level cache for a specific entity //use this in entity class to be cached

Level 2 caching is a mechanism that allows you to cache data across several sessions. Level 2 cache stores data in your application’s shared cache region, which is accessible by every Hibernate session in your application. first-level cache will always be consulted before any attempt is made to locate an object in the second-level cache. Level 2 caching can help optimize your application by reducing the number of database queries needed to load data.

advantages:
	Reduced Latency
	Reduced Database Load
	Increased Throughput
	Reduced Resource Utilization
	Improved Scalability/ performance

Cache Eviction
--------------
When a cache gets full, it can’t store new data without getting rid of old data. That’s what cache eviction is all about. It’s the process of getting rid of old data in the cache to make room for new stuff. It’s done by using algorithms to figure out which data to get rid of. There are different policies for doing this, like LRU(Least Recently Used), LFU(Least Frequently Used), and RPP(Random Replacement). These policies are picked based on the type of data being stored and how often it’s accessed. The idea is to make sure the cache only has stuff that’s important and frequently accessed. That way, it’ll be more efficient and work better.


Batch Processing
----------------
Consider a situation when you need to upload a large number of records into your database using Hibernate. Following is the code snippet to achieve this using Hibernate −

Session session = SessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i<100000; i++ ) {
   Employee employee = new Employee(.....);
   session.save(employee);
}
tx.commit();
session.close();

By default, Hibernate will cache all the persisted objects in the session-level cache and ultimately your application would fall over with an "OutOfMemoryException" somewhere around the 50,000th row. You can resolve this problem, if you are using batch processing with Hibernate.

To use the batch processing feature, first set hibernate.jdbc.batch_size as batch size to a number either 20 or 50 depending on object size. This will tell the hibernate container that every X rows to be inserted as batch. To implement this in your code, we would need to do little modification as follows −
Add in props -> <property name = "hibernate.jdbc.batch_size">
        	 50
       		</property>

Session session = SessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i<100000; i++ ) {
   Employee employee = new Employee(.....);
   session.save(employee);
   if( i % 50 == 0 ) { // Same as the JDBC batch size
      //flush a batch of inserts and release memory:
      session.flush();
      session.clear();
   }
}
tx.commit();
session.close();
