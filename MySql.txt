---MySQL---

Constraint can be used to specify the limit on the data type of table. Constraint can be specified while creating or altering the table statement.
NOT NULL
CHECK
DEFAULT
UNIQUE
PRIMARY KEY
FOREIGN KEY

STRUCTURE:
----------
SELECT field_name1, field_name2,... field_nameN   
FROM table_name1, table_name2...  
[WHERE condition]  
[GROUP BY field_name(s)]  
[HAVING condition]   
[ORDER BY field_name(s)]
[OFFSET M ][LIMIT N];  


Maintain USERS
------------
Syntax --> CREATE USER [IF NOT EXISTS] account_name IDENTIFIED BY 'password'; 
account_name => username@hostname

Ex: CREATE USER IF NOT EXISTS adam@localhost IDENTIFIED BY 'jtp123456';  

//If you want to give all privileges to a newly created user, execute the following command.
GRANT ALL PRIVILEGES ON *.* TO adam@localhost;   

DROP USER john@localhost, peter@localhost;  

Select user from mysql.user;  //to see all users


Maintain DATABASES/Schemas
--------------------------
CREATE DATABASE database_name;  

SHOW DATABASES;    

USE database_name;   

DROP SCHEMA/DATABASE IF EXISTS database_name;   


Maintain TABLES(DDL)- cannot undone implicitly saved
---------------------
CREATE TABLE employee_table(  
    id int NOT NULL AUTO_INCREMENT,  
    name varchar(45) NOT NULL,  
    occupation varchar(35) NOT NULL,  
    age int NOT NULL,  
    PRIMARY KEY (id)  
);  

CREATE TABLE Orders (  
    Order_ID int NOT NULL PRIMARY KEY,  
    Order_Num int NOT NULL,  
    ID int,  
    FOREIGN KEY (ID) REFERENCES employee_table(id)  
);  

SHOW TABLES;
SHOW TABLES FROM database_name;  //from another db also

DESC tablename;

DROP TABLE  table_name;  //Drop removes both data & structure of table

TRUNCATE TABLE customer;  //removes the complete data without removing its structure. It is a part of DDL/data definition language command. 

ALTER TABLE cus_tbl  
ADD cus_age varchar(40) NOT NULL;  //add new columns

ALTER TABLE cus_tbl  
ADD cus_address varchar(100) NOT NULL AFTER cus_surname,  	// It tells MySQL where to create the column in the table
ADD cus_salary int(100) NOT NULL AFTER cus_age ;  

ALTER TABLE cus_tbl  
MODIFY cus_surname varchar(50) NULL;   //MODIFY the datatype of existing column in the table

ALTER TABLE table_name
ALTER COLUMN column_name TYPE new_data_type; //in postgress(correct )

ALTER TABLE table_name  
DROP COLUMN column_name;  

ALTER TABLE cus_tbl  
CHANGE COLUMN cus_surname cus_title varchar(20) NOT NULL;   //rename column
---- or ----
ALTER TABLE table_name   
RENAME COLUMN old_column_name TO new_column_name; 

ALTER TABLE cus_tbl RENAME TO cus_table;  //rename table 
--- or ---
RENAME old_table TO new_table;

CREATE TABLE IF NOT EXISTS duplicate_table   //copy other tables data
SELECT * FROM original_table;  


Modify Queries(DML) - can be undone
--------------------
SELECT * FROM People;  

INSERT INTO People (id, name, occupation, age)   
VALUES (101, 'Peter', 'Engineer', 32);  
---- or ----
INSERT INTO People VALUES  	//  to insert multiple values at a time
(102, 'Joseph', 'Developer', 30),  
(103, 'Mike', 'Leader', 28),  
(104, 'Stephen', 'Scientist', 45);  

REPLACE INTO Person (id, city)  //If the duplicate record found, the replace command will delete the existing row and then adds the new record in the table.
  				//otherwise acts as a standard INSERT statement is performed.

INSERT INTO table_name2  
SELECT * FROM table_name1  //to copy all data from one table into another table
WHERE condition;   

UPDATE trainer    
SET email = 'mike@tutorialandexamples.com'    
WHERE course_name = 'Java';  

DELETE FROM Employees WHERE emp_id=107;  


CLAUSES //clause is defined to limit the result set by providing condition to the query. This usually filters some rows from the whole set of records.
--------
FROM
 DISTINCT //only unique values
WHERE //used to filter the Non-grouped data.

  GROUP BY //It groups the duplicate data into one
SELECT emp_name, job, MAX(salary) AS "Sal"  //job is there in the select query but not in the group by query.
FROM employees  				If it is enclosed in any of the group functions like sum(sal) etc – then it is not an error. But whatever column is included in the select query must also be included in the group by query.
GROUP BY emp_name; //check it

 HAVING //used to filter the grouped data,should be used after group by.
ORDER BY //It arranges the data either in ascending / descending order.It should be used always as the last statement in the SQL query


Contol Statements
------------------
SELECT IF(200>350,'YES','NO'); //IF function 
 
SELECT lastname,  
IF(age>20,"Mature","Immature") As Result  
FROM student;  

SELECT IFNULL(NULL,5); //If the first expression is not NULL, it will return the first expression. Otherwise, it will return the second expression

SELECT NULLIF("Hello", "404");  //if the first expression is equal to the second expression, it returns the NULL. Otherwise, it returns the first expression.

//PROCEDURE
Stored Procedure is a function consists of many SQL statement to access the database system. Several SQL statements are consolidated into a stored procedure and execute them whenever and wherever required.

DELIMITER $$   //IF statement(IF else, if then else if else etc)
CREATE PROCEDURE myResult(IN original_rate NUMERIC(6,2),OUT discount_rate NUMERIC(6,2))    
      BEGIN  
         IF (original_rate>200) THEN  
            SET discount_rate=original_rate*0.5;  
        ELSE  
            SET discount_rate=original_rate;  
         END IF;  
         select discount_rate;  
     END$$  
DELIMITER ;  

//CALL statement to call a stored procedure. 
CALL procedure_name( parameter(s))  


Operators
----------
AND/OR---> SELECT * FROM cus_tbl  	//AND -both conditions to be true
	WHERE cus_firstname = 'Abijeet'  //OR -any one condition has to be true
	AND/OR cus_id > 3;  

MySQL does not contain built-in Boolean or Bool data type. They provide a TINYINT data type instead of Boolean or Bool data types

// IN – it is used for evaluating multiple values
SELECT * FROM officers  
WHERE officer_name IN ('Ajeet', 'Vimal', 'Deepika');  

SELECT * FROM officers  
WHERE officer_name NOT IN ('Ajeet','Vimal','Deepika');  

//LIKE – used for pattern matching
	%  - matches 0 or n characters
	_  - matches exactly one character
SELECT officer_name  
FROM officers  
WHERE address LIKE 'Luck%';  

//BETWEEN – used for searching based on range of values
SELECT * FROM officers  
WHERE salary BETWEEN 10000 AND 300000;  

//IS operator – it is used to compare nulls
SELECT * FROM officers  
WHERE commision IS NULL;  

SELECT * FROM officers  
WHERE officer_name IS NOT NULL;  

Aggregate Functions
--------------------
count()
 sum()
 avg()
 min()
 max()

 GROUP_CONCAT()  //returns the concatenated string from multiple rows into a single string
SELECT emp_id, emp_fname, emp_lname, dept_id,     
GROUP_CONCAT(designation) as "designation" FROM employee group by emp_id;

 first() & last()  //we must have to use the LIMIT clause. It is because FIRST()&LAST() function only supports in MS Access.

Joins  //Joins are used, when we need to fetch the data from multiple tables based on the relationship between the fields of the tables
------

//CROSS JOIN is used to combine all possibilities of the two or more tables and returns the result that contains every row from all contributing tables. The CROSS JOIN is also known as CARTESIAN JOIN
SELECT customer.customer_id, customer.cust_name, orders.order_id, orders.price  
FROM 
customer CROSS JOIN orders; 
 
----->In the absence of a WHERE condition the CARTESIAN JOIN will behave like a CARTESIAN PRODUCT . i.e., the number of rows in the result-set is the product of the number of rows of the two tables.
In the presence of WHERE condition this JOIN will function like a INNER JOIN.
Generally speaking, Cross join is similar to an inner join where the join-condition will always evaluate to True 


//The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies.
SELECT students.stud_fname, students.stud_lname, students.city, technologies.technology    
FROM 
students INNER JOIN technologies    //INNER JOIN or JOIN or EQUI-JOIN(Same)
ON students.student_id = technologies.tech_id;  


//Left Joins returns all records from the left-hand table and only the matching records from the right side table
SELECT customers.customer_id, customers.cust_name, customers.occupation, orders.price, orders.date   //the table customers and orders have the same column name, which is customer_id. In that case, we can also be used with the USING clause to access the records.  
FROM customers  
LEFT JOIN orders USING(customer_id);  //LEFT OUTER JOIN

//Right Join is used to joins two or more tables and returns all rows from the right-hand table, and only those results from the other table that fulfilled the join condition.
SELECT customers.customer_id, Customers.cust_name, orders.price, orders.date  
FROM customers  
RIGHT JOIN orders ON customers.customer_id = orders.customer_id  //RIGHT OUTER JOIN
ORDER BY  customer_id; 


//FULL OUTER JOIN ....contains all rows from both tables...not like cross join
SELECT customers.customer_id, Customers.cust_name, orders.price, orders.date  
FROM customers  
FULL OUTER JOIN orders 
ON customers.customer_id = orders.customer_id;  //OUTER JOIN


//SELF JOIN is a join that is used to join with itself. Self Join uses table aliases,This is used to compare values in a column with other values in the same column in the same table
SELECT a.ROLL_NO , b.NAME
FROM Student a, Student b	//No join command inbetween
WHERE a.ROLL_NO < b.ROLL_NO; 


Imp Concepts
-------------
1)Union operator allows us to combine two or more results from multiple SELECT queries into a single result set. It has a default feature to remove the duplicate rows from the tables
	The number and order of the columns should be the same in all queries.
	Union and Join are different.
2)The UNION ALL operator combines two or more results from multiple SELECT queries and returns all records into a single result set. It does not remove the duplicate rows from the output
SELECT City FROM student1  
UNION  
SELECT City FROM student2  
ORDER BY City;  

3)Limit query is used to restrict the number of rows returns from the result set, rather than fetching the whole set in the MySQL database.
SELECT column_list  
FROM table_name  
LIMIT offset, limit-count;  

4)to find Nth highest salary in the Employee table with & without using limit
SELECT DISTINCT salary FROM emp ORDER BY salary DESC LIMIT n-1,1; //using limit

5)finding the duplicate values in a table
SELECT name, email, COUNT(name)  
FROM student_contacts  
GROUP BY name  
HAVING COUNT(name) > 1; 

-->Delete Duplicate Record Using Inner Join
DELETE S1 FROM student_contacts AS S1  
INNER JOIN student_contacts AS S2   
WHERE S1.id < S2.id AND S1.email = S2.email;  //use < to keep the lowest id in the table

6)REGEXP_INSTR() Function returns the index value of the substring by matching the given string. This function returns 0 if no match is found. Else, it returns 1.
SELECT REGEXP_INSTR ('BCA MCA PGDCA BBA MBA BCA', 'BCA', 1, 2, 0) AS BCA_index_2;  //1=pos at which the search will starts,2=occurrence of a match,0=to specify which type of position of the matched substring will return i.e; 0=eturns the position of the matched substring's first character & 1=return the position following the matched substring

